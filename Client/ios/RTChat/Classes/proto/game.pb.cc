// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "game.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Cmd {

namespace {

const ::google::protobuf::Descriptor* cmdNotifyLogicInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cmdNotifyLogicInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* cmdLogin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cmdLogin_reflection_ = NULL;
const ::google::protobuf::Descriptor* cmdquestCreateRoom_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cmdquestCreateRoom_reflection_ = NULL;
const ::google::protobuf::Descriptor* cmdReturnCreateResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cmdReturnCreateResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* cmdRequestEnterRoom_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cmdRequestEnterRoom_reflection_ = NULL;
const ::google::protobuf::Descriptor* cmdReturnEnterResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cmdReturnEnterResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* cmdNotifyLeaveRoom_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cmdNotifyLeaveRoom_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_game_2eproto() {
  protobuf_AddDesc_game_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "game.proto");
  GOOGLE_CHECK(file != NULL);
  cmdNotifyLogicInfo_descriptor_ = file->message_type(0);
  static const int cmdNotifyLogicInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cmdNotifyLogicInfo, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cmdNotifyLogicInfo, port_),
  };
  cmdNotifyLogicInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cmdNotifyLogicInfo_descriptor_,
      cmdNotifyLogicInfo::default_instance_,
      cmdNotifyLogicInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cmdNotifyLogicInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cmdNotifyLogicInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cmdNotifyLogicInfo));
  cmdLogin_descriptor_ = file->message_type(1);
  static const int cmdLogin_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cmdLogin, id_),
  };
  cmdLogin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cmdLogin_descriptor_,
      cmdLogin::default_instance_,
      cmdLogin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cmdLogin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cmdLogin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cmdLogin));
  cmdquestCreateRoom_descriptor_ = file->message_type(2);
  static const int cmdquestCreateRoom_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cmdquestCreateRoom, ctype_),
  };
  cmdquestCreateRoom_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cmdquestCreateRoom_descriptor_,
      cmdquestCreateRoom::default_instance_,
      cmdquestCreateRoom_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cmdquestCreateRoom, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cmdquestCreateRoom, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cmdquestCreateRoom));
  cmdReturnCreateResult_descriptor_ = file->message_type(3);
  static const int cmdReturnCreateResult_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cmdReturnCreateResult, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cmdReturnCreateResult, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cmdReturnCreateResult, port_),
  };
  cmdReturnCreateResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cmdReturnCreateResult_descriptor_,
      cmdReturnCreateResult::default_instance_,
      cmdReturnCreateResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cmdReturnCreateResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cmdReturnCreateResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cmdReturnCreateResult));
  cmdRequestEnterRoom_descriptor_ = file->message_type(4);
  static const int cmdRequestEnterRoom_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cmdRequestEnterRoom, roomid_),
  };
  cmdRequestEnterRoom_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cmdRequestEnterRoom_descriptor_,
      cmdRequestEnterRoom::default_instance_,
      cmdRequestEnterRoom_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cmdRequestEnterRoom, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cmdRequestEnterRoom, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cmdRequestEnterRoom));
  cmdReturnEnterResult_descriptor_ = file->message_type(5);
  static const int cmdReturnEnterResult_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cmdReturnEnterResult, isok_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cmdReturnEnterResult, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cmdReturnEnterResult, port_),
  };
  cmdReturnEnterResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cmdReturnEnterResult_descriptor_,
      cmdReturnEnterResult::default_instance_,
      cmdReturnEnterResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cmdReturnEnterResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cmdReturnEnterResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cmdReturnEnterResult));
  cmdNotifyLeaveRoom_descriptor_ = file->message_type(6);
  static const int cmdNotifyLeaveRoom_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cmdNotifyLeaveRoom, id_),
  };
  cmdNotifyLeaveRoom_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cmdNotifyLeaveRoom_descriptor_,
      cmdNotifyLeaveRoom::default_instance_,
      cmdNotifyLeaveRoom_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cmdNotifyLeaveRoom, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cmdNotifyLeaveRoom, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cmdNotifyLeaveRoom));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_game_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cmdNotifyLogicInfo_descriptor_, &cmdNotifyLogicInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cmdLogin_descriptor_, &cmdLogin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cmdquestCreateRoom_descriptor_, &cmdquestCreateRoom::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cmdReturnCreateResult_descriptor_, &cmdReturnCreateResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cmdRequestEnterRoom_descriptor_, &cmdRequestEnterRoom::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cmdReturnEnterResult_descriptor_, &cmdReturnEnterResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cmdNotifyLeaveRoom_descriptor_, &cmdNotifyLeaveRoom::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_game_2eproto() {
  delete cmdNotifyLogicInfo::default_instance_;
  delete cmdNotifyLogicInfo_reflection_;
  delete cmdLogin::default_instance_;
  delete cmdLogin_reflection_;
  delete cmdquestCreateRoom::default_instance_;
  delete cmdquestCreateRoom_reflection_;
  delete cmdReturnCreateResult::default_instance_;
  delete cmdReturnCreateResult_reflection_;
  delete cmdRequestEnterRoom::default_instance_;
  delete cmdRequestEnterRoom_reflection_;
  delete cmdReturnEnterResult::default_instance_;
  delete cmdReturnEnterResult_reflection_;
  delete cmdNotifyLeaveRoom::default_instance_;
  delete cmdNotifyLeaveRoom_reflection_;
}

void protobuf_AddDesc_game_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Cmd::protobuf_AddDesc_public_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\ngame.proto\022\003Cmd\032\014public.proto\".\n\022cmdNo"
    "tifyLogicInfo\022\n\n\002ip\030\001 \002(\t\022\014\n\004port\030\002 \002(\r\""
    "\026\n\010cmdLogin\022\n\n\002id\030\001 \002(\t\"#\n\022cmdquestCreat"
    "eRoom\022\r\n\005ctype\030\001 \002(\r\"A\n\025cmdReturnCreateR"
    "esult\022\016\n\006roomid\030\001 \002(\004\022\n\n\002ip\030\002 \002(\t\022\014\n\004por"
    "t\030\003 \002(\r\"%\n\023cmdRequestEnterRoom\022\016\n\006roomid"
    "\030\001 \002(\004\">\n\024cmdReturnEnterResult\022\014\n\004isok\030\001"
    " \002(\010\022\n\n\002ip\030\002 \001(\t\022\014\n\004port\030\003 \001(\r\" \n\022cmdNot"
    "ifyLeaveRoom\022\n\n\002id\030\001 \002(\r", 344);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "game.proto", &protobuf_RegisterTypes);
  cmdNotifyLogicInfo::default_instance_ = new cmdNotifyLogicInfo();
  cmdLogin::default_instance_ = new cmdLogin();
  cmdquestCreateRoom::default_instance_ = new cmdquestCreateRoom();
  cmdReturnCreateResult::default_instance_ = new cmdReturnCreateResult();
  cmdRequestEnterRoom::default_instance_ = new cmdRequestEnterRoom();
  cmdReturnEnterResult::default_instance_ = new cmdReturnEnterResult();
  cmdNotifyLeaveRoom::default_instance_ = new cmdNotifyLeaveRoom();
  cmdNotifyLogicInfo::default_instance_->InitAsDefaultInstance();
  cmdLogin::default_instance_->InitAsDefaultInstance();
  cmdquestCreateRoom::default_instance_->InitAsDefaultInstance();
  cmdReturnCreateResult::default_instance_->InitAsDefaultInstance();
  cmdRequestEnterRoom::default_instance_->InitAsDefaultInstance();
  cmdReturnEnterResult::default_instance_->InitAsDefaultInstance();
  cmdNotifyLeaveRoom::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_game_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_game_2eproto {
  StaticDescriptorInitializer_game_2eproto() {
    protobuf_AddDesc_game_2eproto();
  }
} static_descriptor_initializer_game_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int cmdNotifyLogicInfo::kIpFieldNumber;
const int cmdNotifyLogicInfo::kPortFieldNumber;
#endif  // !_MSC_VER

cmdNotifyLogicInfo::cmdNotifyLogicInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void cmdNotifyLogicInfo::InitAsDefaultInstance() {
}

cmdNotifyLogicInfo::cmdNotifyLogicInfo(const cmdNotifyLogicInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void cmdNotifyLogicInfo::SharedCtor() {
  _cached_size_ = 0;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cmdNotifyLogicInfo::~cmdNotifyLogicInfo() {
  SharedDtor();
}

void cmdNotifyLogicInfo::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (this != default_instance_) {
  }
}

void cmdNotifyLogicInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cmdNotifyLogicInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cmdNotifyLogicInfo_descriptor_;
}

const cmdNotifyLogicInfo& cmdNotifyLogicInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_2eproto();  return *default_instance_;
}

cmdNotifyLogicInfo* cmdNotifyLogicInfo::default_instance_ = NULL;

cmdNotifyLogicInfo* cmdNotifyLogicInfo::New() const {
  return new cmdNotifyLogicInfo;
}

void cmdNotifyLogicInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    port_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cmdNotifyLogicInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string ip = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_port;
        break;
      }
      
      // required uint32 port = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void cmdNotifyLogicInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string ip = 1;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->ip(), output);
  }
  
  // required uint32 port = 2;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->port(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* cmdNotifyLogicInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string ip = 1;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ip(), target);
  }
  
  // required uint32 port = 2;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->port(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int cmdNotifyLogicInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string ip = 1;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }
    
    // required uint32 port = 2;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->port());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cmdNotifyLogicInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cmdNotifyLogicInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cmdNotifyLogicInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cmdNotifyLogicInfo::MergeFrom(const cmdNotifyLogicInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cmdNotifyLogicInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cmdNotifyLogicInfo::CopyFrom(const cmdNotifyLogicInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cmdNotifyLogicInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void cmdNotifyLogicInfo::Swap(cmdNotifyLogicInfo* other) {
  if (other != this) {
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cmdNotifyLogicInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cmdNotifyLogicInfo_descriptor_;
  metadata.reflection = cmdNotifyLogicInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int cmdLogin::kIdFieldNumber;
#endif  // !_MSC_VER

cmdLogin::cmdLogin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void cmdLogin::InitAsDefaultInstance() {
}

cmdLogin::cmdLogin(const cmdLogin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void cmdLogin::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cmdLogin::~cmdLogin() {
  SharedDtor();
}

void cmdLogin::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void cmdLogin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cmdLogin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cmdLogin_descriptor_;
}

const cmdLogin& cmdLogin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_2eproto();  return *default_instance_;
}

cmdLogin* cmdLogin::default_instance_ = NULL;

cmdLogin* cmdLogin::New() const {
  return new cmdLogin;
}

void cmdLogin::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cmdLogin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void cmdLogin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* cmdLogin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int cmdLogin::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cmdLogin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cmdLogin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cmdLogin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cmdLogin::MergeFrom(const cmdLogin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cmdLogin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cmdLogin::CopyFrom(const cmdLogin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cmdLogin::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void cmdLogin::Swap(cmdLogin* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cmdLogin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cmdLogin_descriptor_;
  metadata.reflection = cmdLogin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int cmdquestCreateRoom::kCtypeFieldNumber;
#endif  // !_MSC_VER

cmdquestCreateRoom::cmdquestCreateRoom()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void cmdquestCreateRoom::InitAsDefaultInstance() {
}

cmdquestCreateRoom::cmdquestCreateRoom(const cmdquestCreateRoom& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void cmdquestCreateRoom::SharedCtor() {
  _cached_size_ = 0;
  ctype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cmdquestCreateRoom::~cmdquestCreateRoom() {
  SharedDtor();
}

void cmdquestCreateRoom::SharedDtor() {
  if (this != default_instance_) {
  }
}

void cmdquestCreateRoom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cmdquestCreateRoom::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cmdquestCreateRoom_descriptor_;
}

const cmdquestCreateRoom& cmdquestCreateRoom::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_2eproto();  return *default_instance_;
}

cmdquestCreateRoom* cmdquestCreateRoom::default_instance_ = NULL;

cmdquestCreateRoom* cmdquestCreateRoom::New() const {
  return new cmdquestCreateRoom;
}

void cmdquestCreateRoom::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ctype_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cmdquestCreateRoom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ctype = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ctype_)));
          set_has_ctype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void cmdquestCreateRoom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 ctype = 1;
  if (has_ctype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ctype(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* cmdquestCreateRoom::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 ctype = 1;
  if (has_ctype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ctype(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int cmdquestCreateRoom::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ctype = 1;
    if (has_ctype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ctype());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cmdquestCreateRoom::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cmdquestCreateRoom* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cmdquestCreateRoom*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cmdquestCreateRoom::MergeFrom(const cmdquestCreateRoom& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ctype()) {
      set_ctype(from.ctype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cmdquestCreateRoom::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cmdquestCreateRoom::CopyFrom(const cmdquestCreateRoom& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cmdquestCreateRoom::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void cmdquestCreateRoom::Swap(cmdquestCreateRoom* other) {
  if (other != this) {
    std::swap(ctype_, other->ctype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cmdquestCreateRoom::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cmdquestCreateRoom_descriptor_;
  metadata.reflection = cmdquestCreateRoom_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int cmdReturnCreateResult::kRoomidFieldNumber;
const int cmdReturnCreateResult::kIpFieldNumber;
const int cmdReturnCreateResult::kPortFieldNumber;
#endif  // !_MSC_VER

cmdReturnCreateResult::cmdReturnCreateResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void cmdReturnCreateResult::InitAsDefaultInstance() {
}

cmdReturnCreateResult::cmdReturnCreateResult(const cmdReturnCreateResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void cmdReturnCreateResult::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = GOOGLE_ULONGLONG(0);
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cmdReturnCreateResult::~cmdReturnCreateResult() {
  SharedDtor();
}

void cmdReturnCreateResult::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (this != default_instance_) {
  }
}

void cmdReturnCreateResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cmdReturnCreateResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cmdReturnCreateResult_descriptor_;
}

const cmdReturnCreateResult& cmdReturnCreateResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_2eproto();  return *default_instance_;
}

cmdReturnCreateResult* cmdReturnCreateResult::default_instance_ = NULL;

cmdReturnCreateResult* cmdReturnCreateResult::New() const {
  return new cmdReturnCreateResult;
}

void cmdReturnCreateResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roomid_ = GOOGLE_ULONGLONG(0);
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    port_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cmdReturnCreateResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 roomid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ip;
        break;
      }
      
      // required string ip = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_port;
        break;
      }
      
      // required uint32 port = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void cmdReturnCreateResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 roomid = 1;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->roomid(), output);
  }
  
  // required string ip = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->ip(), output);
  }
  
  // required uint32 port = 3;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->port(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* cmdReturnCreateResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 roomid = 1;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->roomid(), target);
  }
  
  // required string ip = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ip(), target);
  }
  
  // required uint32 port = 3;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->port(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int cmdReturnCreateResult::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 roomid = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roomid());
    }
    
    // required string ip = 2;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }
    
    // required uint32 port = 3;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->port());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cmdReturnCreateResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cmdReturnCreateResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cmdReturnCreateResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cmdReturnCreateResult::MergeFrom(const cmdReturnCreateResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cmdReturnCreateResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cmdReturnCreateResult::CopyFrom(const cmdReturnCreateResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cmdReturnCreateResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void cmdReturnCreateResult::Swap(cmdReturnCreateResult* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cmdReturnCreateResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cmdReturnCreateResult_descriptor_;
  metadata.reflection = cmdReturnCreateResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int cmdRequestEnterRoom::kRoomidFieldNumber;
#endif  // !_MSC_VER

cmdRequestEnterRoom::cmdRequestEnterRoom()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void cmdRequestEnterRoom::InitAsDefaultInstance() {
}

cmdRequestEnterRoom::cmdRequestEnterRoom(const cmdRequestEnterRoom& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void cmdRequestEnterRoom::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cmdRequestEnterRoom::~cmdRequestEnterRoom() {
  SharedDtor();
}

void cmdRequestEnterRoom::SharedDtor() {
  if (this != default_instance_) {
  }
}

void cmdRequestEnterRoom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cmdRequestEnterRoom::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cmdRequestEnterRoom_descriptor_;
}

const cmdRequestEnterRoom& cmdRequestEnterRoom::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_2eproto();  return *default_instance_;
}

cmdRequestEnterRoom* cmdRequestEnterRoom::default_instance_ = NULL;

cmdRequestEnterRoom* cmdRequestEnterRoom::New() const {
  return new cmdRequestEnterRoom;
}

void cmdRequestEnterRoom::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roomid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cmdRequestEnterRoom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 roomid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void cmdRequestEnterRoom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 roomid = 1;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->roomid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* cmdRequestEnterRoom::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 roomid = 1;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->roomid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int cmdRequestEnterRoom::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 roomid = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roomid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cmdRequestEnterRoom::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cmdRequestEnterRoom* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cmdRequestEnterRoom*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cmdRequestEnterRoom::MergeFrom(const cmdRequestEnterRoom& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cmdRequestEnterRoom::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cmdRequestEnterRoom::CopyFrom(const cmdRequestEnterRoom& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cmdRequestEnterRoom::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void cmdRequestEnterRoom::Swap(cmdRequestEnterRoom* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cmdRequestEnterRoom::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cmdRequestEnterRoom_descriptor_;
  metadata.reflection = cmdRequestEnterRoom_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int cmdReturnEnterResult::kIsokFieldNumber;
const int cmdReturnEnterResult::kIpFieldNumber;
const int cmdReturnEnterResult::kPortFieldNumber;
#endif  // !_MSC_VER

cmdReturnEnterResult::cmdReturnEnterResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void cmdReturnEnterResult::InitAsDefaultInstance() {
}

cmdReturnEnterResult::cmdReturnEnterResult(const cmdReturnEnterResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void cmdReturnEnterResult::SharedCtor() {
  _cached_size_ = 0;
  isok_ = false;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cmdReturnEnterResult::~cmdReturnEnterResult() {
  SharedDtor();
}

void cmdReturnEnterResult::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (this != default_instance_) {
  }
}

void cmdReturnEnterResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cmdReturnEnterResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cmdReturnEnterResult_descriptor_;
}

const cmdReturnEnterResult& cmdReturnEnterResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_2eproto();  return *default_instance_;
}

cmdReturnEnterResult* cmdReturnEnterResult::default_instance_ = NULL;

cmdReturnEnterResult* cmdReturnEnterResult::New() const {
  return new cmdReturnEnterResult;
}

void cmdReturnEnterResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    isok_ = false;
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    port_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cmdReturnEnterResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool isok = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isok_)));
          set_has_isok();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ip;
        break;
      }
      
      // optional string ip = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_port;
        break;
      }
      
      // optional uint32 port = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void cmdReturnEnterResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool isok = 1;
  if (has_isok()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->isok(), output);
  }
  
  // optional string ip = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->ip(), output);
  }
  
  // optional uint32 port = 3;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->port(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* cmdReturnEnterResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool isok = 1;
  if (has_isok()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->isok(), target);
  }
  
  // optional string ip = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ip(), target);
  }
  
  // optional uint32 port = 3;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->port(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int cmdReturnEnterResult::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool isok = 1;
    if (has_isok()) {
      total_size += 1 + 1;
    }
    
    // optional string ip = 2;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }
    
    // optional uint32 port = 3;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->port());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cmdReturnEnterResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cmdReturnEnterResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cmdReturnEnterResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cmdReturnEnterResult::MergeFrom(const cmdReturnEnterResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isok()) {
      set_isok(from.isok());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cmdReturnEnterResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cmdReturnEnterResult::CopyFrom(const cmdReturnEnterResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cmdReturnEnterResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void cmdReturnEnterResult::Swap(cmdReturnEnterResult* other) {
  if (other != this) {
    std::swap(isok_, other->isok_);
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cmdReturnEnterResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cmdReturnEnterResult_descriptor_;
  metadata.reflection = cmdReturnEnterResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int cmdNotifyLeaveRoom::kIdFieldNumber;
#endif  // !_MSC_VER

cmdNotifyLeaveRoom::cmdNotifyLeaveRoom()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void cmdNotifyLeaveRoom::InitAsDefaultInstance() {
}

cmdNotifyLeaveRoom::cmdNotifyLeaveRoom(const cmdNotifyLeaveRoom& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void cmdNotifyLeaveRoom::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cmdNotifyLeaveRoom::~cmdNotifyLeaveRoom() {
  SharedDtor();
}

void cmdNotifyLeaveRoom::SharedDtor() {
  if (this != default_instance_) {
  }
}

void cmdNotifyLeaveRoom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cmdNotifyLeaveRoom::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cmdNotifyLeaveRoom_descriptor_;
}

const cmdNotifyLeaveRoom& cmdNotifyLeaveRoom::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_2eproto();  return *default_instance_;
}

cmdNotifyLeaveRoom* cmdNotifyLeaveRoom::default_instance_ = NULL;

cmdNotifyLeaveRoom* cmdNotifyLeaveRoom::New() const {
  return new cmdNotifyLeaveRoom;
}

void cmdNotifyLeaveRoom::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cmdNotifyLeaveRoom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void cmdNotifyLeaveRoom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* cmdNotifyLeaveRoom::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int cmdNotifyLeaveRoom::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cmdNotifyLeaveRoom::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cmdNotifyLeaveRoom* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cmdNotifyLeaveRoom*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cmdNotifyLeaveRoom::MergeFrom(const cmdNotifyLeaveRoom& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cmdNotifyLeaveRoom::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cmdNotifyLeaveRoom::CopyFrom(const cmdNotifyLeaveRoom& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cmdNotifyLeaveRoom::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void cmdNotifyLeaveRoom::Swap(cmdNotifyLeaveRoom* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cmdNotifyLeaveRoom::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cmdNotifyLeaveRoom_descriptor_;
  metadata.reflection = cmdNotifyLeaveRoom_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Cmd

// @@protoc_insertion_point(global_scope)
